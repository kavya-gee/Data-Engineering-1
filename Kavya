### Web Scraping Script for Dermstore ###

import os
import subprocess
import requests
import time
import random
import re
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument("--headless")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_argument("--start-maximized")

driver = webdriver.Chrome(
    service=Service(ChromeDriverManager().install()),
    options=options
)

driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
    "source": """
    Object.defineProperty(navigator, 'webdriver', {
        get: () => undefined
    });
    """
})

image_folder = "product_images"
if not os.path.exists(image_folder):
    os.makedirs(image_folder)


def download_image(image_url, product_name):
    try:
        response = requests.get(image_url, stream=True)
        if response.status_code == 200:
            safe_name = "".join([c for c in product_name if c.isalpha() or c.isdigit() or c in " -_"]).rstrip()
            filename = os.path.join(image_folder, f"{safe_name}.jpg")
            with open(filename, "wb") as file:
                for chunk in response.iter_content(1024):
                    file.write(chunk)
            return filename
        return None
    except Exception as e:
        print(f"Error downloading image: {str(e)}")
        return None


try:
    driver.get("https://www.dermstore.com/c/skin-care/moisturizers/")

    try:
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "button#onetrust-accept-btn-handler")
        )).click()
        print("Cookies accepted")
    except Exception as e:
        print("Cookie consent not found:", str(e))

    products = []


    def get_product_links():
        WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located(
                (By.CSS_SELECTOR, "product-card-wrapper[data-e2e^='search_list-item-'] a.product-item"))
        )
        return [product.get_attribute("href") for product in driver.find_elements(
            By.CSS_SELECTOR, "product-card-wrapper[data-e2e^='search_list-item-'] a.product-item"
        )]


    def get_product_details(url):
        driver.get(url)
        try:
            product = {
                'name': WebDriverWait(driver, 15).until(
                    EC.visibility_of_element_located((By.CSS_SELECTOR, "h1#product-title"))
                ).text.strip(),
                'price': WebDriverWait(driver, 15).until(
                    EC.visibility_of_element_located((By.CSS_SELECTOR, "#product-price span"))
                ).text.strip(),
                'rating': "N/A",
                'reviews_count': "N/A",
                'image_url': WebDriverWait(driver, 15).until(
                    EC.visibility_of_element_located(
                        (By.CSS_SELECTOR, "#carousel > figure:nth-child(1) > picture > img"))
                ).get_attribute("src"),
                'size': 'N/A',
                'skinType': 'N/A',
                'ingredients': [],
                'skinConcerns': "N/A"
            }

            try:
                size_element = WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '[aria-labelledby="Volume"] li'))
                )
                product['size'] = size_element.get_attribute("innerHTML").strip()
            except:
                pass

            try:
                rating_element = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR,
                                                    "#reviews > div > div > div.lg\\:col-span-3.flex.flex-col > div:nth-child(1) > div > span"))
                )
                product['rating'] = rating_element.text.strip()

                reviews_element = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR,
                                                    "#reviews > div > div > div.lg\\:col-span-3.flex.flex-col > div:nth-child(1) > p"))
                )
                product['reviews_count'] = reviews_element.text.strip().replace(" reviews", "")
            except:
                print(f"Rating/reviews not found for {product['name']}")

            try:
                concerns_element = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '[aria-labelledby="Skin-Type-&-Concerns"] p'))
                )
                concerns_html = concerns_element.get_attribute('innerHTML')

                ideal_for_these_concerns_section_pattern = r'Ideal for these Concerns:</strong>(.*?)(?=<strong>|$)'
                section_match = re.search(ideal_for_these_concerns_section_pattern, concerns_html, re.DOTALL)

                if section_match:
                    concerns_section = section_match.group(1).strip()
                    concerns_list = re.findall(r'<a[^>]+>([^<]+)</a>', concerns_section)
                    product['skinConcerns'] = ', '.join(concerns_list)

            except Exception as e:
                product['skinConcerns'] = "N/A"

            try:
                skin_type_section_pattern = r'Skin Type:</strong>(.*?)(?=<strong>|$)'
                skin_type_match = re.search(skin_type_section_pattern, concerns_html, re.DOTALL)

                if skin_type_match:
                    skin_type_section = skin_type_match.group(1).strip()
                    skin_type_list = re.findall(r'<a[^>]+>([^<]+)</a>', skin_type_section)
                    product['skinType'] = ', '.join(skin_type_list)

            except Exception as e:
                product['skinType'] = "N/A"

            try:
                ingredients_section_pattern = r'Ingredient:</strong>(.*?)(?=<strong>|$)'
                ingredients_match = re.search(ingredients_section_pattern, concerns_html, re.DOTALL)

                if ingredients_match:
                    ingredients_section = ingredients_match.group(1).strip()
                    ingredients_list = re.findall(r'<a[^>]+>([^<]+)</a>', ingredients_section)
                    product['ingredients'] = ', '.join(ingredients_list)

            except Exception as e:
                product['ingredients'] = "N/A"

            image_path = download_image(product['image_url'], product['name'])
            product['image_path'] = image_path if image_path else "Failed to download"

            return product
        except Exception as e:
            print(f"Error getting details from {url}: {str(e)}")
            return None
        finally:
            driver.back()
            time.sleep(random.uniform(1, 3))

    while len(products) < 1000:
        product_links = get_product_links()
        print(f"Found {len(product_links)} products on this page")

        for link in product_links:
            if len(products) >= 1000:
                break
            if product := get_product_details(link):
                products.append(product)
                print(f"\nCollected {len(products)}:")
                print(f"Product Name: {product['name']}")
                print(f"Price: {product['price']}")
                print(f"Size: {product.get('size', 'N/A')}")
                print(f"Rating: {product['rating']}/5")
                print(f"Review: {product['reviews_count']}")
                print(f"Key Ingredients: {product['ingredients']}")
                print(f"Image URL: {product['image_url']}")
                print(f"Skin Concerns: {product['skinConcerns']}")
                print(f"Skin Types: {product['skinType']}\n")

        try:
            next_btn = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#product-list-page pagination-wrapper .next-page-button"))
            )
            print("Found 'Next' button")

            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", next_btn)
            time.sleep(random.uniform(0.5, 1.5))
            driver.execute_script("arguments[0].click();", next_btn)
            print("Clicked 'Next' button")

            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "product-card-wrapper"))
            )
            print("Successfully navigated to next page")
        except Exception as e:
            print("No more pages or error navigating:", str(e))
            break

finally:
    driver.quit()
    print("\n=== SCRAPING RESULTS ===")
    print(f"Total products collected: {len(products)}")

    try:
        df = pd.DataFrame([{
            'Product Name': p['name'],
            'Price': p['price'],
            'Size': p['size'],
            'Rating': p['rating'],
            'Review': p['reviews_count'],
            'Skin Concerns': p['skinConcerns'],
            'Key Ingredients': p['ingredients'],
            'Images': p['image_url'],
            'Skin Types': p['skinType'],
        } for p in products])

        df.to_csv('dermstore_products.csv', index=False)
        print("\nSuccessfully saved data to dermstore_products.csv")

    except Exception as e:
        print(f"\nError saving CSV: {str(e)}")

def upload_to_hdfs(local_path, hdfs_path):
    command = ['hdfscli', 'upload', '--alias=dev', '--force' , local_path, hdfs_path]
    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode == 0:
        print(f"File uploaded successfully to {hdfs_path}")
    else:
        print(f"Upload failed: {result.stderr}")
 
csv_filename = 'dermstore_products.csv'
local_path = f'.\\{csv_filename}'
hdfs_path = f'/data-engineering/{csv_filename}'
upload_to_hdfs(local_path, hdfs_path)   


### Sending the data to HDFS and Mysql ###

import pymysql
import csv
import re
from hdfs import InsecureClient
import os

def insert_dermstore_products(connection, csv_path):
    with connection.cursor() as cursor:
        cursor.execute("INSERT IGNORE INTO Brand (name) VALUES ('dermstore')")
        brand_id = cursor.lastrowid if cursor.rowcount > 0 else cursor.execute("SELECT id FROM Brand WHERE name = 'dermstore'").fetchone()[0]

        with open(csv_path, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file)
            for row in reader:
                print(row)
                rating = None
                if row['Rating'].strip().upper() != 'N/A':
                    try:
                        rating = float(row['Rating'])
                    except ValueError:
                        rating = None  
                review = None
                if row['Review'].strip().upper() != 'N/A':
                    try:
                        review = int(row['Review'])
                    except ValueError:
                        review = None

                price = -1
                if row['Price'] == 'RRP:':
                    price = -1
                else:
                    price = float(row['Price'].strip(' ').replace('$', ''))

                cursor.execute("""
                    INSERT INTO Product (
                        brand_id, name, price, size, rating, review_count, description
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (
                    brand_id,
                    row['Product Name'],
                    price,
                    row['Size'],
                    rating,
                    review,
                    row.get('Description', '')  
                ))
                product_id = cursor.lastrowid

                cursor.execute("INSERT INTO Image (product_id, url) VALUES (%s, %s)",
                             (product_id, row['Images']))

                process_relationships(cursor, product_id, row)

def insert_paulas_choice_products(connection, csv_path):
    with connection.cursor() as cursor:
        paulas_choice_brand_name = "Paula's Choice"
        cursor.execute("INSERT IGNORE INTO Brand (name) VALUES (%s)", (paulas_choice_brand_name,))
        brand_id = cursor.lastrowid if cursor.rowcount > 0 else cursor.execute("SELECT id FROM Brand WHERE name = 'Paula\'s Choice'").fetchone()[0]

        with open(csv_path, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file)
            for row in reader:
                print(row)
                cursor.execute("""
                    INSERT INTO Product (
                        brand_id, name, price, size, rating, review_count, description
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (
                    brand_id,
                    row['Product Name'],
                    float(row['Price'].replace('$', '')),
                    row['Size'],
                    float(row['Rating']),
                    extract_review_count(row['Review']),
                    row['Description']
                ))
                product_id = cursor.lastrowid

                cursor.execute("INSERT INTO Image (product_id, url) VALUES (%s, %s)",
                             (product_id, row['Images']))

                process_relationships(cursor, product_id, row)

def insert_ordinary_products(connection, csv_path):
    with connection.cursor() as cursor:
        brand_id = get_brand_id(cursor, "Ordinary")
        if not brand_id:
            raise ValueError("Could not get/create brand ID for Ordinary")
       
        with open(csv_path, 'r', encoding='utf-8-sig') as file:
            reader = csv.DictReader(file)
            for row in reader:
                print(row)
                cursor.execute("""
                    INSERT INTO Product (
                        brand_id, name, price, size, rating, review_count, description
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (
                    brand_id,
                    row['Product Name'],
                    safe_float_conversion(row['Price'], default=-1),
                    row['Size'],
                    safe_float_conversion(row['Rating']),
                    safe_float_conversion(row['Review'], default=0),
                    row['Description']
                ))
                product_id = cursor.lastrowid

                image_fields = [f for f in reader.fieldnames if f.startswith('Images')]

                for img_field in image_fields:
                    if row.get(img_field):  
                        cursor.execute("INSERT INTO Image (product_id, url) VALUES (%s, %s)",
                                       (product_id, row[img_field]))


def process_relationships(cursor, product_id, row):
    for concern in row.get('Skin Concerns', '').split(', '):
        if concern:
            cursor.execute("INSERT IGNORE INTO SkinConcern (name) VALUES (%s)", (concern,))
            if cursor.rowcount > 0:
                concern_id = cursor.lastrowid
            else:
                cursor.execute("SELECT id FROM SkinConcern WHERE name = %s", (concern,))
                result = cursor.fetchone()
                concern_id = result['id'] if result else None  

            if concern_id:
                cursor.execute("INSERT IGNORE INTO ProductSkinConcern (product_id, concern_id) VALUES (%s, %s)",
                               (product_id, concern_id))

    for skin_type in row.get('Skin Types', '').split(', '):
        if skin_type:
            cursor.execute("INSERT IGNORE INTO SkinType (name) VALUES (%s)", (skin_type,))
            if cursor.rowcount > 0:
                type_id = cursor.lastrowid
            else:
                cursor.execute("SELECT id FROM SkinType WHERE name = %s", (skin_type,))
                result = cursor.fetchone()
                type_id = result['id'] if result else None  
            cursor.execute("INSERT IGNORE INTO ProductSkinType (product_id, type_id) VALUES (%s, %s)",
                         (product_id, type_id))

    for ingredient in row.get('Key Ingredients', '').split(', '):
        if ingredient:
            cursor.execute("INSERT IGNORE INTO Ingredient (name) VALUES (%s)", (ingredient,))
            if cursor.rowcount > 0:
                ingredient_id = cursor.lastrowid
            else:
                cursor.execute("SELECT id FROM Ingredient WHERE name = %s", (ingredient,))
                result = cursor.fetchone()
                ingredient_id = result['id'] if result else None
            cursor.execute("INSERT IGNORE INTO ProductIngredient (product_id, ingredient_id) VALUES (%s, %s)",
                         (product_id, ingredient_id))

def extract_review_count(review_str):
    match = re.search(r'\d+', review_str)
    return int(match.group()) if match else 0

def safe_float_conversion(value, default=None):
    try:
        cleaned = value.replace('$', '').replace(',', '').strip()
        return float(cleaned)
    except (ValueError, TypeError, AttributeError):
        return default
    
def get_brand_id(cursor, brand_name): 
    cursor.execute("INSERT IGNORE INTO Brand (name) VALUES (%s)", (brand_name,))
    if cursor.rowcount > 0:
        return cursor.lastrowid
    else:
        cursor.execute("SELECT id FROM Brand WHERE name = %s", (brand_name,))
        result = cursor.fetchone()
        return result['id'] if result else None

hdfs_url = 'http://100.77.34.80:9870'
client = InsecureClient(hdfs_url, user='hdfs')

hdfs_folder_path = '/data-engineering/'
local_folder_path = 'C:\\Users\\kavya\\DockerProjects\\hadoop\\downloaded_folder\\'
unix_local_folder_path = '~/Downloads/csv/'

os.makedirs(local_folder_path, exist_ok=True)

client.download(
    hdfs_folder_path,
    local_folder_path,
    overwrite=True,
    n_threads=4  
)

connection = pymysql.connect(host='100.77.34.80',
                             port=3307,
                             user='root',
                             password='123123',
                             database='TestScript5',
                             cursorclass=pymysql.cursors.DictCursor)

try:
    insert_dermstore_products(connection, f'{local_folder_path}\\data-engineering\\dermstore_products.csv')
    insert_paulas_choice_products(connection, f'{local_folder_path}\\data-engineering\\paulas_choice_products.csv')
    insert_ordinary_products(connection, f'{local_folder_path}\\data-engineering\\the_ordinary_products.csv')
    connection.commit()
finally:
    connection.close()
 
